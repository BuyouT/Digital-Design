library ieee; 
use ieee.std_logic_1164.all; 
use ieee.numeric_std.all;

entity alu_ns is 
	generic ( 
		WIDTH : positive := 16 
	); 
	port ( 
		input1 : in std_logic_vector(WIDTH-1 downto 0); 
		input2 : in std_logic_vector(WIDTH-1 downto 0); 
		sel : in std_logic_vector(3 downto 0); 
		output : out std_logic_vector(WIDTH-1 downto 0); 
		overflow : out std_logic 
	); 
end alu_ns;

architecture BHV of alu_ns is
	
	process(input1, input2, sel)
		variable temp : std_logic_vector(width downto 0);
		variable temp_mult : std_logic_vector(width*2-1 downto 0);
		--variable outSwap : std_logic_vector(width-1 downto 0);
	begin
		case sel is
			--add
			when "0000" =>
				temp := std_logic_vector(resize(unsigned(input1),width+1) + 
										resize(unsigned(input2),width+1));
				output <= temp(width-1 downto 0);
				overflow <= temp(width);
			--sub
			when "0001" =>
				temp := std_logic_vector(resize(unsigned(input1),width+1) - 
										resize(unsigned(input2),width+1));
				output <= temp(width-1 downto 0);
				overflow <= '0';
			--mult
			when "0010" => 
				temp_mult := std_logic_vector(unsigned(input1)*unsigned(input2));
				output <= temp_mult(width-1 downto 0);
				for i in 2*width-1 downto width loop
					if temp_mult (i) = '1' then					
						overflow <= '1'; -- if any of the temp_mult(2*width-1 downto width) are '1', then overflow is '1'
						exit;
					else 
						overflow <= '0';
					end if;
				end loop;
			--and
			when "0011" =>
				output <= input1 and input2;
			--or
			when "0100" =>
				output <= input1 or input2;
			--xor
			when "0101" =>
				output <= input1 xor input2;
			--nor
			when "0110" =>
				output <= input1 nor input2;
			--not
			when "0111" =>
				output <= input1 not input2;
			--shift left
			when "1000" =>
				temp := std_logic_vector(resize(shift_left(unsigned(input1))));
				output <= temp(width-1 downto 0);
				overflow <= temp(width);
			
			when others =>
				output <= (others => '0');
				overflow <= '0';