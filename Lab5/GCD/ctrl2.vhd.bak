library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ctrl1 is
  generic (WIDTH : integer := 8);
  port (
     clk			   : in    	std_logic;
	  rst				: in		std_logic;
     x_lt_y	    	: in		std_logic;
     x_ne_y	      : in    	std_logic;
     go    		   : in    	std_logic;
	  x_sel,y_sel	: out		std_logic;
	  x_en,y_en   	: out		std_logic;
     output_en  	: out		std_logic;
     done   		: out   	std_logic);
end ctrl1;

architecture logic of ctrl1 is
	type STATE_TYPE is (A, B, C, D);
	signal state, next_state : STATE_TYPE;
	-- A start
	-- B IN_LD
	-- C SUB
	-- D END
begin

	process(clk)
	begin
		if rst = '1' then
			state <= A;
		elsif (rising_edge(clk)) then
			state <= next_state;
		end if;
	end process;
	
	process(state)
	begin
		x_sel <= '1';
		y_sel <= '1';
		x_en <= '0';
		y_en <= '0';
		output_en <= '0';
		done <= '0';
		case state is
			when A =>
				if go = '1' then
					next_state <= B;
				else 
					next_state <= A;
				end if;
			when B =>
				x_sel <= '0';
				y_sel <= '0';
				x_en <= '1';
				y_en <= '1';
				next_state <= C;
			when C =>
				if(x_ne_y = '0') then 
					output_en <= '1';
					next_state <= D;
				elsif(x_lt_y = '1') then
					y_en <= '1'; 
					next_state <= C;
				else
					x_en <= '1'; 
					next_state <= C;
				end if;
			when D =>
				done <= '1';
				if(go = '1') then
					next_state <= D;
				else
					next_state <= A;
				end if;
			when others =>
				null;
		end case;
	end process;
end logic;